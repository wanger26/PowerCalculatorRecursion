


ARM Macro Assembler    Page 1 


    1 00000000                 AREA             power, CODE, READONLY
    2 00000000                 ENTRY
    3 00000000         
    4 00000000 E28FDF67 
                       Main    ADR              sp, Stack   ;Getting the addres
                                                            s of the base of th
                                                            e stack. In this ap
                                                            plication a full as
                                                            cending stack will 
                                                            be used
    5 00000004 E3A01002        MOV              r1, #2      ;r0 will represent 
                                                            the base of the exp
                                                            onential function
    6 00000008 E3A02001        MOV              r2, #1      ;r1 will represent 
                                                            the exponent of the
                                                             exponetial functio
                                                            n
    7 0000000C E92D0006        STMFD            sp!, {r1,r2} ;Store both the ba
                                                            se and exponent on 
                                                            the stack to be use
                                                            d as parameters
    8 00000010 EB000003        BL               Power       ;Call the function 
                                                            power to calculate 
                                                            the base to the pow
                                                            er of the exponent 
                                                            specified
    9 00000014         
   10 00000014 E49D3004        LDR              r3, [sp], #4 ;Store the answer 
                                                            returned by the fun
                                                            ction in the r2
   11 00000018 E58F3188        STR              r3, result  ;Storing the answer
                                                             in variable Answer
                                                            
   12 0000001C E8BD0006        LDMFD            sp!, {r1,r2} ;Pop the parameter
                                                            s, we dont need the
                                                            m so we can ignore 
                                                            their values
   13 00000020 EAFFFFFE 
                       Loop    B                Loop        ;Infinite loop, ind
                                                            icating that the pr
                                                            ogram is finsihed e
                                                            xecuting
   14 00000024         
   15 00000024 E24DD004 
                       Power   SUB              sp, sp, #4  ;Reserving the loca
                                                            tion of the return 
                                                            value  
   16 00000028 E92D4800        STMFD            sp!, {fp, lr} ;Store the return
                                                             address and previo
                                                            us frame pointer on
                                                             the stack so we ca
                                                            n retrive it later
   17 0000002C E1A0B00D        MOV              fp, sp      ;Move the frame poi
                                                            nter to the bottom 
                                                            of the current acti
                                                            vaion frame 
   18 00000030 E24DD004        SUB              sp, sp, #4  ;Advance the stack 
                                                            pointer to so it is
                                                             in its proper loca



ARM Macro Assembler    Page 2 


                                                            tion (pointing at t
                                                            he top of the stack
                                                            )
   19 00000034 E59B100C        LDR              r1, [fp, #12] ;Get the first pa
                                                            rameter (base) pass
                                                            ed into the fucntio
                                                            n and store it in r
                                                            1
   20 00000038 E59B2010        LDR              r2, [fp, #16] ;Get the second p
                                                            aramter (exponent) 
                                                            passed into the fun
                                                            ction and store it 
                                                            in r2
   21 0000003C         
   22 0000003C E3520000        CMP              r2, #0      ;Check to see if th
                                                            e base case is reac
                                                            hed: when the expon
                                                            ent is equal to 0
   23 00000040 03A02001        MOVEQ            r2, #1      ;If it is move the 
                                                            number one to regis
                                                            ter 6 so we can ret
                                                            urn it
   24 00000044 0A000013        BEQ              Bottom      ;Then finally the m
                                                            ethod is done so go
                                                             to the end of the 
                                                            method 
   25 00000048         
   26 00000048 E3120001        TST              r2, #2_1    ;If we get here tha
                                                            t means we have not
                                                             reached base case.
                                                             So check if the ex
                                                            ponent is odd
   27 0000004C 0A000008        BEQ              Else        ;If the result of t
                                                            he above line is 0,
                                                             then the value of 
                                                            the exponent is eve
                                                            n so go to the else
                                                            
   28 00000050 E2422001        SUB              r2, r2, #1  ;Otherwise it is an
                                                             odd number. So let
                                                            s subtract one from
                                                             the current expone
                                                            nt
   29 00000054 E92D0006        STMFD            sp!, {r1,r2} ;Then place the ba
                                                            se and new epxonent
                                                             value on the stack
                                                             as paramters for t
                                                            he next method call
                                                            
   30 00000058 EBFFFFF1        BL               Power       ;And finally call t
                                                            he function the Pow
                                                            er with paramters b
                                                            ase and exponent
   31 0000005C E28DD00C        ADD              sp, sp, #12 ;Pop the parameters
                                                             from the call
   32 00000060 E59B100C        LDR              r1, [fp, #12] ;recovering the o
                                                            riginal value of r1
                                                             
   33 00000064 E59B2010        LDR              r2, [fp, #16] ;recovering the o



ARM Macro Assembler    Page 3 


                                                            riginal value of r2
                                                            
   34 00000068 E51B3010        LDR              r3, [fp, #-16] ;Get the returne
                                                            d value from the ca
                                                            ll
   35 0000006C E0020391        MUL              r2, r1, r3  ;Use the returned v
                                                            alue and multiply i
                                                            t by the orginal ba
                                                            se
   36 00000070 EA000008        B                Bottom      ;Then we are done t
                                                            he method, so go to
                                                             the end of the met
                                                            hod
   37 00000074         
   38 00000074 E1A020C2 
                       Else    ASR              r2, #1      ;Else the number is
                                                             even, so divide th
                                                            e exponent by 2 by 
                                                            shifting it to the 
                                                            right
   39 00000078 E92D0006        STMFD            sp!, {r1,r2} ;Then store the th
                                                            e base and new expo
                                                            nent on the stack a
                                                            s paramters
   40 0000007C EBFFFFE8        BL               Power       ;Then finally call 
                                                            the power function 
                                                            with paramters base
                                                             and exponent
   41 00000080 E28DD00C        ADD              sp, sp, #12 ;Pop the paramters 
                                                            from the call
   42 00000084 E59B100C        LDR              r1, [fp, #12] ;recovering the o
                                                            riginal value of r1
                                                            
   43 00000088 E59B2010        LDR              r2, [fp, #16] ;recovering the o
                                                            riginal value of r2
                                                            
   44 0000008C E51B3010        LDR              r3, [fp, #-16] ;Get the returne
                                                            d value from the ca
                                                            ll and store it in 
                                                            the local variable 
                                                            y
   45 00000090 E50B3004        STR              r3, [fp, #-4] ;Update the local
                                                             variable y in the 
                                                            stack frame
   46 00000094 E0020393        MUL              r2, r3, r3  ;Multiply y by y
   47 00000098         
   48 00000098 E58B2008 
                       Bottom  STR              r2, [fp, #8] ;Then store the an
                                                            swer of the previou
                                                            is calculation on t
                                                            he stack as a retur
                                                            n value
   49 0000009C E28DD004        ADD              sp, sp, #4  ;Adjust stack point
                                                            er so it is pointin
                                                            g at the stop of th
                                                            e stack
   50 000000A0 E8BD8800        LDMFD            sp!,{fp,pc} ;restore frame poin
                                                            ter and return
   51 000000A4         



ARM Macro Assembler    Page 4 


   52 000000A4 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 



ARM Macro Assembler    Page 5 


              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00               space            256         ;making room for th
                                                            e stack
   53 000001A4 00000000 
                       Stack   DCD              0x0000      ;start of the stack
                                                            
   54 000001A8 00000000 
                       result  DCD              0x0000      ;variable for stori
                                                            ng the answer
   55 000001AC                 END                          ;By: Jakob Wanger, 
                                                            Student #: 25095002
                                                            2
Command Line: --debug --xref --bi --apcs=interwork --depend=.\power.d -o.\power
.o -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include --predefine="__EVAL SETA 
1" --list=.\power.lst power.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

Bottom 00000098

Symbol: Bottom
   Definitions
      At line 48 in file power.s
   Uses
      At line 24 in file power.s
      At line 36 in file power.s

Else 00000074

Symbol: Else
   Definitions
      At line 38 in file power.s
   Uses
      At line 27 in file power.s
Comment: Else used once
Loop 00000020

Symbol: Loop
   Definitions
      At line 13 in file power.s
   Uses
      At line 13 in file power.s
Comment: Loop used once
Main 00000000

Symbol: Main
   Definitions
      At line 4 in file power.s
   Uses
      None
Comment: Main unused
Power 00000024

Symbol: Power
   Definitions
      At line 15 in file power.s
   Uses
      At line 8 in file power.s
      At line 30 in file power.s
      At line 40 in file power.s

Stack 000001A4

Symbol: Stack
   Definitions
      At line 53 in file power.s
   Uses
      At line 4 in file power.s
Comment: Stack used once
power 00000000

Symbol: power
   Definitions
      At line 1 in file power.s
   Uses
      None
Comment: power unused



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

result 000001A8

Symbol: result
   Definitions
      At line 54 in file power.s
   Uses
      At line 11 in file power.s
Comment: result used once
8 symbols
339 symbols in table
